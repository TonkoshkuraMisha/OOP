"""
Композиция.
Чтобы понять, зачем нужна композиция в программировании, проведем аналогию с реальным
миром. Большинство биологических и технических объектов состоят из более простых частей,
также являющихся объектами. Например, животное состоит из различный органов (сердце,
желудок), компьютер — из различного "железа" (процессор, память).
Не следует путать композицию с наследованием, в том числе множественным. Наследование
предполагает принадлежность к какой-то общности (похожесть), а композиция —
формирование целого из частей. Наследуются атрибуты, т. е. возможности, другого класса, при
этом объектов непосредственно родительского класса не создается. При композиции же класс-
агрегатор создает объекты других классов.
"""


class WinDoor:
    def __init__(self, x, y):
        self.square = x * y


class Room:
    def __init__(self, x, y, z):
        self.square = 2 * z * (x + y)
        self.wd = []

    def add_wd(self, w, h):
        self.wd.append(WinDoor(w, h))

    def work_surface(self):
        new_square = self.square
        for i in self.wd:
            new_square -= i.square
        return new_square


r1 = Room(6, 3, 2.7)
print(r1.square)  # выведет 48.6
r1.add_wd(1, 1)
r1.add_wd(1, 1)
r1.add_wd(1, 2)
print(r1.work_surface())  # выведет 44.6
