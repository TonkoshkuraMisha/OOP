"""
Генераторы можно считать подвидом итераторов, а способ их создания – инструментом для
создания несложных итераторов.
В отличие от обычных итераторов, генераторы создаются путем вызова функции, а не от класса.

Существует еще более простой, чем функция с yield, способ создания итераторов –
генераторные выражения. Они подходят, когда код тела функции можно записать в одно
выражение.
"""
import random

a = [i + 1 for i in range(10)]
print(a)
print(type(a))

b = [random.randint(0, 9) for i in range(5)]
print(b)
print(type(b))

c = [i for i in b if i % 2 == 0]
print(c)
print(type(c))

"""
В случае генераторных выражений создается объект-генератор, у которого будет вычисляться 
очередной элемент только при каждом вызове next():
"""

a = (i + 1 for i in range(10))
print(a)
print(type(a))

print(next(a))

print(next(a))

# Пример со звездочкой с помощью генераторного выражения будет выглядеть так:
d = ('*'*i for i in range(6))
for i in d:
    print(i)


"""
В отличие от генераторных выражений, yield-функции более универсальны не только из-за 
произвольного количества кода в их теле. В них вы можете передавать разные значения 
аргументов. А значит, одна и та же функция может использоваться для создания несколько 
разных генераторов.
"""
